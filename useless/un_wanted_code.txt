//Ovo je bilo za ne≈°to u main.dart

class MyWidget extends StatelessWidget {
  const MyWidget({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme:ThemeData(
        primarySwatch: Colors.purple,
      ),
      home: const MyAppBar(),
    );
  }
}

class MyAppBar extends StatelessWidget {
  const MyAppBar({super.key});

  @override
  Widget build(BuildContext context) {
    return const Text("Pozz");
  }
}

////

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter',
      theme: ThemeData(
        // This is the theme of your application.
        //
        // TRY THIS: Try running your application with "flutter run". You'll see
        // the application has a blue toolbar. Then, without quitting the app,
        // try changing the seedColor in the colorScheme below to Colors.green
        // and then invoke "hot reload" (save your changes or press the "hot
        // reload" button in a Flutter-supported IDE, or press "r" if you used
        // the command line to start the app).
        //
        // Notice that the counter didn't reset back to zero; the application
        // state is not lost during the reload. To reset the state, use hot
        // restart instead.
        //
        // This works for code too, not just values: Most code changes can be
        // tested with just a hot reload.
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const LayoutExamples(),
    );
  }
}


////

class MyHelloWorld extends StatelessWidget{
  String title;
  MyHelloWorld({Key?key, required this.title}):super(key: key);

  @override
  Widget build(BuildContext context){

    return Text(title);
  }
}

class Counter extends StatefulWidget {
  const Counter({super.key});

  @override
  State<Counter> createState() => _CounterState();
}

class _CounterState extends State<Counter> {
  int _count=0;
  void incrementCounter()
  {
    setState(() {
    _count++;
    });
  }

  void resetCounter()
  {
    setState(() {
      _count=0;
    });
  }


  @override
  Widget build(BuildContext context) {
    
    return Column(
      children: [
        Text("You have pushed $_count times"),
        ElevatedButton(onPressed: incrementCounter, child: const Text("Increment ++"),
        ),
        const Text("Press to reset the score"),
        ElevatedButton(onPressed: resetCounter, child: const Text("Reset score"),
        )
      ],
    );
  }
}


class LayoutExamples extends StatelessWidget {
  const LayoutExamples({super.key});

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Container(
          height: 150,
          color: Colors.blue,
          alignment: Alignment.center,
          child: const Text("example text"),
        ),
        const Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            Text("text1"),
            Text("text2"),
            Text("text3"),
          ],
        ),
        Container(
          height: 150,
          color: Colors.red,
          alignment: Alignment.center,
          child: const Text("example rows"),
        ),
      ],
    );
  }
}

////



